namespace FirstApp
{
  partial class PartialClass
  {
    public PartialClass() => CallingClass();
  }
}

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var userModel = UserModel.FromJson(jsonString);

namespace QuickType
{
  using Newtonsoft.Json;
  using Newtonsoft.Json.Converters;
  using System;
  using System.Collections.Generic;
  using System.Globalization;

  public partial class UserModel
  {
    [JsonProperty( "id" )]
    public string Id { get; set; }

    [JsonProperty( "lastName" )]
    public string LastName { get; set; }

    [JsonProperty( "firstName" )]
    public string FirstName { get; set; }

    [JsonProperty( "email" )]
    public string Email { get; set; }

    [JsonProperty( "title" )]
    public string Title { get; set; }

    [JsonProperty( "picture" )]
    public Uri Picture { get; set; }

    public void PrintData()
    {
      Console.WriteLine( "id: {0}", Id );
      Console.WriteLine( "name: {0}", FirstName + " " + LastName );
      Console.WriteLine( "email: {0}", Email );
      Console.WriteLine( "title: {0}", Title );
      Console.WriteLine( "picture: {0}", Picture );
      Console.WriteLine();
    }
  }

  public class UserModelWrapper
  {
    [JsonProperty( "data" )]
    public List<UserModel> Data { set; get; }

    [JsonProperty( "total" )]
    public int Total { set; get; }

    [JsonProperty( "page" )]
    public int Page { set; get; }

    [JsonProperty( "limit" )]
    public int Limit { set; get; }

    [JsonProperty( "offset" )]
    public int Offset { set; get; }

  }

  //public partial class UserModel
  //{
  //  public static List<>
  //}

  public partial class UserModel
  {
    public static List<UserModel> FromJson( string json ) => JsonConvert.DeserializeObject<List<UserModel>>( json, QuickType.Converter.Settings );
  }

  public static class Serialize
  {
    public static string ToJson( this List<UserModel> self ) => JsonConvert.SerializeObject( self, QuickType.Converter.Settings );
  }

  internal static class Converter
  {
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
      MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
      DateParseHandling = DateParseHandling.None,
      Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
    };
  }
}

